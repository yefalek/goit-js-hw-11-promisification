{"version":3,"sources":["partials/part1.js","partials/part2.js","partials/part3.js","index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","all","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,MAAMA,EAAQC,GACH,IAAIC,QAAQ,CAACC,EAASC,KACzBC,WAAW,KAAKF,EAAQF,IAAKA,KAI7BK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACXnB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC5Bd,QAAQe,IAAIF,EAASG,IAAIC,GAAOA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,IAK9Fb,EAASc,GAAgBZ,QAAQa,MAAMD,GAE7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AChBrC,MAAMgB,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChB7B,MAAAA,EAAQsB,EAA0B,IAAK,KACtC,OAAA,IAAIpB,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACUoB,KAAKE,SAAW,IAGjCxB,EAAQ,CAAC0B,EAAYC,GAAI9B,IAE3BI,EAAOyB,EAAYC,KAClB9B,MAID+B,EAAa,EAAED,EAAIvB,MACvBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAM/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH;;ACjClE,aAFA,QAAA,oBACA,QAAA,oBACA,QAAA","file":"src.48b7fb62.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    return new Promise((resolve, reject) => {\n        setTimeout(()=>{resolve(ms)},ms)\n    });\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName) => {\n  return Promise.all(allUsers.map(user=> user.name === userName ? { ...user, active: !user.active } : user,))\n  \n     \n  };\n  \n  const logger = updatedUsers => console.table(updatedUsers);\n  \n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n  \n        if (canProcess) {\n          resolve([transaction.id, delay]);\n        }\n        reject(transaction.id);\n      }, delay);\n    });\n  };\n  \n  const logSuccess = ([id, time]) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n   /*\n   * Должно работать так\n   */\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);","import './partials/part1';\nimport './partials/part2';\nimport './partials/part3';"]}